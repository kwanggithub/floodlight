/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sdnplatform.sync.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"all", "unchecked", "rawtypes"}) public class LeaderMessage implements org.apache.thrift.TBase<LeaderMessage, LeaderMessage._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LeaderMessage");

  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DOMAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("domainId", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField LEADER_NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderNodeId", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField LEADER_WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderWeight", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LeaderMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LeaderMessageTupleSchemeFactory());
  }

  public AsyncMessageHeader header; // required
  public short domainId; // optional
  public short leaderNodeId; // optional
  public int leaderWeight; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HEADER((short)1, "header"),
    DOMAIN_ID((short)2, "domainId"),
    LEADER_NODE_ID((short)3, "leaderNodeId"),
    LEADER_WEIGHT((short)4, "leaderWeight");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HEADER
          return HEADER;
        case 2: // DOMAIN_ID
          return DOMAIN_ID;
        case 3: // LEADER_NODE_ID
          return LEADER_NODE_ID;
        case 4: // LEADER_WEIGHT
          return LEADER_WEIGHT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DOMAINID_ISSET_ID = 0;
  private static final int __LEADERNODEID_ISSET_ID = 1;
  private static final int __LEADERWEIGHT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DOMAIN_ID,_Fields.LEADER_NODE_ID,_Fields.LEADER_WEIGHT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AsyncMessageHeader.class)));
    tmpMap.put(_Fields.DOMAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("domainId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEADER_NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderNodeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEADER_WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("leaderWeight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LeaderMessage.class, metaDataMap);
  }

  public LeaderMessage() {
  }

  public LeaderMessage(
    AsyncMessageHeader header)
  {
    this();
    this.header = header;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LeaderMessage(LeaderMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHeader()) {
      this.header = new AsyncMessageHeader(other.header);
    }
    this.domainId = other.domainId;
    this.leaderNodeId = other.leaderNodeId;
    this.leaderWeight = other.leaderWeight;
  }

  public LeaderMessage deepCopy() {
    return new LeaderMessage(this);
  }

  @Override
  public void clear() {
    this.header = null;
    setDomainIdIsSet(false);
    this.domainId = 0;
    setLeaderNodeIdIsSet(false);
    this.leaderNodeId = 0;
    setLeaderWeightIsSet(false);
    this.leaderWeight = 0;
  }

  public AsyncMessageHeader getHeader() {
    return this.header;
  }

  public LeaderMessage setHeader(AsyncMessageHeader header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public short getDomainId() {
    return this.domainId;
  }

  public LeaderMessage setDomainId(short domainId) {
    this.domainId = domainId;
    setDomainIdIsSet(true);
    return this;
  }

  public void unsetDomainId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOMAINID_ISSET_ID);
  }

  /** Returns true if field domainId is set (has been assigned a value) and false otherwise */
  public boolean isSetDomainId() {
    return EncodingUtils.testBit(__isset_bitfield, __DOMAINID_ISSET_ID);
  }

  public void setDomainIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOMAINID_ISSET_ID, value);
  }

  public short getLeaderNodeId() {
    return this.leaderNodeId;
  }

  public LeaderMessage setLeaderNodeId(short leaderNodeId) {
    this.leaderNodeId = leaderNodeId;
    setLeaderNodeIdIsSet(true);
    return this;
  }

  public void unsetLeaderNodeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEADERNODEID_ISSET_ID);
  }

  /** Returns true if field leaderNodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderNodeId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEADERNODEID_ISSET_ID);
  }

  public void setLeaderNodeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEADERNODEID_ISSET_ID, value);
  }

  public int getLeaderWeight() {
    return this.leaderWeight;
  }

  public LeaderMessage setLeaderWeight(int leaderWeight) {
    this.leaderWeight = leaderWeight;
    setLeaderWeightIsSet(true);
    return this;
  }

  public void unsetLeaderWeight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEADERWEIGHT_ISSET_ID);
  }

  /** Returns true if field leaderWeight is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderWeight() {
    return EncodingUtils.testBit(__isset_bitfield, __LEADERWEIGHT_ISSET_ID);
  }

  public void setLeaderWeightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEADERWEIGHT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((AsyncMessageHeader)value);
      }
      break;

    case DOMAIN_ID:
      if (value == null) {
        unsetDomainId();
      } else {
        setDomainId((Short)value);
      }
      break;

    case LEADER_NODE_ID:
      if (value == null) {
        unsetLeaderNodeId();
      } else {
        setLeaderNodeId((Short)value);
      }
      break;

    case LEADER_WEIGHT:
      if (value == null) {
        unsetLeaderWeight();
      } else {
        setLeaderWeight((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HEADER:
      return getHeader();

    case DOMAIN_ID:
      return Short.valueOf(getDomainId());

    case LEADER_NODE_ID:
      return Short.valueOf(getLeaderNodeId());

    case LEADER_WEIGHT:
      return Integer.valueOf(getLeaderWeight());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HEADER:
      return isSetHeader();
    case DOMAIN_ID:
      return isSetDomainId();
    case LEADER_NODE_ID:
      return isSetLeaderNodeId();
    case LEADER_WEIGHT:
      return isSetLeaderWeight();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LeaderMessage)
      return this.equals((LeaderMessage)that);
    return false;
  }

  public boolean equals(LeaderMessage that) {
    if (that == null)
      return false;

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_domainId = true && this.isSetDomainId();
    boolean that_present_domainId = true && that.isSetDomainId();
    if (this_present_domainId || that_present_domainId) {
      if (!(this_present_domainId && that_present_domainId))
        return false;
      if (this.domainId != that.domainId)
        return false;
    }

    boolean this_present_leaderNodeId = true && this.isSetLeaderNodeId();
    boolean that_present_leaderNodeId = true && that.isSetLeaderNodeId();
    if (this_present_leaderNodeId || that_present_leaderNodeId) {
      if (!(this_present_leaderNodeId && that_present_leaderNodeId))
        return false;
      if (this.leaderNodeId != that.leaderNodeId)
        return false;
    }

    boolean this_present_leaderWeight = true && this.isSetLeaderWeight();
    boolean that_present_leaderWeight = true && that.isSetLeaderWeight();
    if (this_present_leaderWeight || that_present_leaderWeight) {
      if (!(this_present_leaderWeight && that_present_leaderWeight))
        return false;
      if (this.leaderWeight != that.leaderWeight)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(LeaderMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LeaderMessage typedOther = (LeaderMessage)other;

    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(typedOther.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, typedOther.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDomainId()).compareTo(typedOther.isSetDomainId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDomainId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainId, typedOther.domainId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaderNodeId()).compareTo(typedOther.isSetLeaderNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderNodeId, typedOther.leaderNodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeaderWeight()).compareTo(typedOther.isSetLeaderWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderWeight, typedOther.leaderWeight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LeaderMessage(");
    boolean first = true;

    sb.append("header:");
    if (this.header == null) {
      sb.append("null");
    } else {
      sb.append(this.header);
    }
    first = false;
    if (isSetDomainId()) {
      if (!first) sb.append(", ");
      sb.append("domainId:");
      sb.append(this.domainId);
      first = false;
    }
    if (isSetLeaderNodeId()) {
      if (!first) sb.append(", ");
      sb.append("leaderNodeId:");
      sb.append(this.leaderNodeId);
      first = false;
    }
    if (isSetLeaderWeight()) {
      if (!first) sb.append(", ");
      sb.append("leaderWeight:");
      sb.append(this.leaderWeight);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (header == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'header' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (header != null) {
      header.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LeaderMessageStandardSchemeFactory implements SchemeFactory {
    public LeaderMessageStandardScheme getScheme() {
      return new LeaderMessageStandardScheme();
    }
  }

  private static class LeaderMessageStandardScheme extends StandardScheme<LeaderMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LeaderMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.header = new AsyncMessageHeader();
              struct.header.read(iprot);
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOMAIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.domainId = iprot.readI16();
              struct.setDomainIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEADER_NODE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.leaderNodeId = iprot.readI16();
              struct.setLeaderNodeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEADER_WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leaderWeight = iprot.readI32();
              struct.setLeaderWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LeaderMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.header != null) {
        oprot.writeFieldBegin(HEADER_FIELD_DESC);
        struct.header.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDomainId()) {
        oprot.writeFieldBegin(DOMAIN_ID_FIELD_DESC);
        oprot.writeI16(struct.domainId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeaderNodeId()) {
        oprot.writeFieldBegin(LEADER_NODE_ID_FIELD_DESC);
        oprot.writeI16(struct.leaderNodeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeaderWeight()) {
        oprot.writeFieldBegin(LEADER_WEIGHT_FIELD_DESC);
        oprot.writeI32(struct.leaderWeight);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LeaderMessageTupleSchemeFactory implements SchemeFactory {
    public LeaderMessageTupleScheme getScheme() {
      return new LeaderMessageTupleScheme();
    }
  }

  private static class LeaderMessageTupleScheme extends TupleScheme<LeaderMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LeaderMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.header.write(oprot);
      BitSet optionals = new BitSet();
      if (struct.isSetDomainId()) {
        optionals.set(0);
      }
      if (struct.isSetLeaderNodeId()) {
        optionals.set(1);
      }
      if (struct.isSetLeaderWeight()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetDomainId()) {
        oprot.writeI16(struct.domainId);
      }
      if (struct.isSetLeaderNodeId()) {
        oprot.writeI16(struct.leaderNodeId);
      }
      if (struct.isSetLeaderWeight()) {
        oprot.writeI32(struct.leaderWeight);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LeaderMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.header = new AsyncMessageHeader();
      struct.header.read(iprot);
      struct.setHeaderIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.domainId = iprot.readI16();
        struct.setDomainIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.leaderNodeId = iprot.readI16();
        struct.setLeaderNodeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.leaderWeight = iprot.readI32();
        struct.setLeaderWeightIsSet(true);
      }
    }
  }

}

