{
  "modules" : {
    "ietf-inet-types@2010-09-24" : {
      "prefix" : "inet",
      "typedefs" : {
        "ip-address" : {
          "name" : "ip-address",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The ip-address type represents an IP address and is IP\nversion neutral.  The format of the textual representations\nimplies the IP version.",
          "typeSchemaNode" : {
            "name" : "ip-address",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "UNION",
            "typeSchemaNodes" : [ {
              "name" : "ipv4-address",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "STRING",
              "typeValidator" : [ {
                "type" : "LENGTH_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 9223372036854775807
                } ]
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
              } ]
            }, {
              "name" : "ipv6-address",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "STRING",
              "typeValidator" : [ {
                "type" : "LENGTH_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 9223372036854775807
                } ]
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?"
              } ]
            } ]
          },
          "leafType" : "UNION"
        },
        "ipv4-address" : {
          "name" : "ipv4-address",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The ipv4-address type represents an IPv4 address in\ndotted-quad notation.  The IPv4 address may include a zone\nindex, separated by a % sign.\nThe zone index is used to disambiguate identical address\nvalues.  For link-local addresses, the zone index will\ntypically be the interface index number or the name of an\ninterface.  If the zone index is not present, the default\nzone of the device will be used.\nThe canonical format for the zone index is the numerical\nformat",
          "typeSchemaNode" : {
            "name" : "ipv4-address",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "STRING",
            "typeValidator" : [ {
              "type" : "LENGTH_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 9223372036854775807
              } ]
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
            } ]
          },
          "leafType" : "STRING"
        },
        "ipv6-prefix" : {
          "name" : "ipv6-prefix",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The ipv6-prefix type represents an IPv6 address prefix.\nThe prefix length is given by the number following the\nslash character and must be less than or equal 128.\nA prefix length value of n corresponds to an IP address\nmask that has n contiguous 1-bits from the most\nsignificant bit (MSB) and all other bits set to 0.\nThe IPv6 address should have all bits that do not belong\nto the prefix set to zero.\nThe canonical format of an IPv6 prefix has all bits of\nthe IPv6 address set to zero that are not part of the\nIPv6 prefix.  Furthermore, IPv6 address is represented\nin the compressed format described in RFC 4291, Section\n2.2, item 2 with the following additional rules: the ::\nsubstitution must be applied to the longest sequence of\nall-zero 16-bit chunks in an IPv6 address.  If there is\na tie, the first sequence of all-zero 16-bit chunks is\nreplaced by ::.  Single all-zero 16-bit chunks are not\ncompressed.  The canonical format uses lowercase\ncharacters and leading zeros are not allowed.",
          "reference" : "RFC 4291: IP Version 6 Addressing Architecture",
          "typeSchemaNode" : {
            "name" : "ipv6-prefix",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "STRING",
            "typeValidator" : [ {
              "type" : "LENGTH_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 9223372036854775807
              } ]
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))"
            } ]
          },
          "leafType" : "STRING"
        },
        "host" : {
          "name" : "host",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The host type represents either an IP address or a DNS\ndomain name.",
          "typeSchemaNode" : {
            "name" : "host",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "UNION",
            "typeSchemaNodes" : [ {
              "name" : "ip-address",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "UNION",
              "typeSchemaNodes" : [ {
                "name" : "ipv4-address",
                "module" : {
                  "name" : "ietf-inet-types",
                  "revision" : "2010-09-24"
                },
                "nodeType" : "TYPE",
                "leafType" : "STRING",
                "typeValidator" : [ {
                  "type" : "LENGTH_VALIDATOR",
                  "ranges" : [ {
                    "start" : 0,
                    "end" : 9223372036854775807
                  } ]
                }, {
                  "type" : "PATTERN_VALIDATOR",
                  "pattern" : "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?"
                } ]
              }, {
                "name" : "ipv6-address",
                "module" : {
                  "name" : "ietf-inet-types",
                  "revision" : "2010-09-24"
                },
                "nodeType" : "TYPE",
                "leafType" : "STRING",
                "typeValidator" : [ {
                  "type" : "LENGTH_VALIDATOR",
                  "ranges" : [ {
                    "start" : 0,
                    "end" : 9223372036854775807
                  } ]
                }, {
                  "type" : "PATTERN_VALIDATOR",
                  "pattern" : "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
                }, {
                  "type" : "PATTERN_VALIDATOR",
                  "pattern" : "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?"
                } ]
              } ]
            }, {
              "name" : "domain-name",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "STRING",
              "typeValidator" : [ {
                "type" : "LENGTH_VALIDATOR",
                "ranges" : [ {
                  "start" : 1,
                  "end" : 253
                } ]
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
              } ]
            } ]
          },
          "leafType" : "UNION"
        },
        "as-number" : {
          "name" : "as-number",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The as-number type represents autonomous system numbers\nwhich identify an Autonomous System (AS).  An AS is a set\nof routers under a single technical administration, using\nan interior gateway protocol and common metrics to route\npackets within the AS, and using an exterior gateway\nprotocol to route packets to other ASs'.  IANA maintains\nthe AS number space and has delegated large parts to the\nregional registries.\nAutonomous system numbers were originally limited to 16\nbits.  BGP extensions have enlarged the autonomous system\nnumber space to 32 bits.  This type therefore uses an uint32\nbase type without a range restriction in order to support\na larger autonomous system number space.\nIn the value set and its semantics, this type is equivalent\nto the InetAutonomousSystemNumber textual convention of\nthe SMIv2.",
          "reference" : "RFC 1930: Guidelines for creation, selection, and registration\nof an Autonomous System (AS)\nRFC 4271: A Border Gateway Protocol 4 (BGP-4)\nRFC 4893: BGP Support for Four-octet AS Number Space\nRFC 4001: Textual Conventions for Internet Network Addresses",
          "typeSchemaNode" : {
            "name" : "as-number",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "INTEGER",
            "typeValidator" : [ {
              "type" : "RANGE_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 4294967295
              } ]
            } ]
          },
          "leafType" : "INTEGER"
        },
        "domain-name" : {
          "name" : "domain-name",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The domain-name type represents a DNS domain name.  The\nname SHOULD be fully qualified whenever possible.\nInternet domain names are only loosely specified.  Section\n3.5 of RFC 1034 recommends a syntax (modified in Section\n2.1 of RFC 1123).  The pattern above is intended to allow\nfor current practice in domain name use, and some possible\nfuture expansion.  It is designed to hold various types of\ndomain names, including names used for A or AAAA records\n(host names) and other records, such as SRV records.  Note\nthat Internet host names have a stricter syntax (described\nin RFC 952) than the DNS recommendations in RFCs 1034 and\n1123, and that systems that want to store host names in\nschema nodes using the domain-name type are recommended to\nadhere to this stricter standard to ensure interoperability.\nThe encoding of DNS names in the DNS protocol is limited\nto 255 characters.  Since the encoding consists of labels\nprefixed by a length bytes and there is a trailing NULL\nbyte, only 253 characters can appear in the textual dotted\nnotation.\nThe description clause of schema nodes using the domain-name\ntype MUST describe when and how these names are resolved to\nIP addresses.  Note that the resolution of a domain-name value\nmay require to query multiple DNS records (e.g., A for IPv4\nand AAAA for IPv6).  The order of the resolution process and\nwhich DNS record takes precedence can either be defined\nexplicitely or it may depend on the configuration of the\nresolver.\nDomain-name values use the US-ASCII encoding.  Their canonical\nformat uses lowercase US-ASCII characters.  Internationalized\ndomain names MUST be encoded in punycode as described in RFC\n3492",
          "reference" : "RFC  952: DoD Internet Host Table Specification\nRFC 1034: Domain Names - Concepts and Facilities\nRFC 1123: Requirements for Internet Hosts -- Application\nand Support\nRFC 2782: A DNS RR for specifying the location of services\n(DNS SRV)\nRFC 3492: Punycode: A Bootstring encoding of Unicode for\nInternationalized Domain Names in Applications\n(IDNA)\nRFC 5891: Internationalizing Domain Names in Applications\n(IDNA): Protocol",
          "typeSchemaNode" : {
            "name" : "domain-name",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "STRING",
            "typeValidator" : [ {
              "type" : "LENGTH_VALIDATOR",
              "ranges" : [ {
                "start" : 1,
                "end" : 253
              } ]
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\."
            } ]
          },
          "leafType" : "STRING"
        },
        "port-number" : {
          "name" : "port-number",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The port-number type represents a 16-bit port number of an\nInternet transport layer protocol such as UDP, TCP, DCCP, or\nSCTP.  Port numbers are assigned by IANA.  A current list of\nall assignments is available from <http://www.iana.org/>.\nNote that the port number value zero is reserved by IANA.  In\nsituations where the value zero does not make sense, it can\nbe excluded by subtyping the port-number type.\nIn the value set and its semantics, this type is equivalent\nto the InetPortNumber textual convention of the SMIv2.",
          "reference" : "RFC  768: User Datagram Protocol\nRFC  793: Transmission Control Protocol\nRFC 4960: Stream Control Transmission Protocol\nRFC 4340: Datagram Congestion Control Protocol (DCCP)\nRFC 4001: Textual Conventions for Internet Network Addresses",
          "typeSchemaNode" : {
            "name" : "port-number",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "INTEGER",
            "typeValidator" : [ {
              "type" : "RANGE_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 65535
              } ]
            } ]
          },
          "leafType" : "INTEGER"
        },
        "ip-prefix" : {
          "name" : "ip-prefix",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The ip-prefix type represents an IP prefix and is IP\nversion neutral.  The format of the textual representations\nimplies the IP version.",
          "typeSchemaNode" : {
            "name" : "ip-prefix",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "UNION",
            "typeSchemaNodes" : [ {
              "name" : "ipv4-prefix",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "STRING",
              "typeValidator" : [ {
                "type" : "LENGTH_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 9223372036854775807
                } ]
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
              } ]
            }, {
              "name" : "ipv6-prefix",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "STRING",
              "typeValidator" : [ {
                "type" : "LENGTH_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 9223372036854775807
                } ]
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)"
              }, {
                "type" : "PATTERN_VALIDATOR",
                "pattern" : "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))"
              } ]
            } ]
          },
          "leafType" : "UNION"
        },
        "ipv4-prefix" : {
          "name" : "ipv4-prefix",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The ipv4-prefix type represents an IPv4 address prefix.\nThe prefix length is given by the number following the\nslash character and must be less than or equal to 32.\nA prefix length value of n corresponds to an IP address\nmask that has n contiguous 1-bits from the most\nsignificant bit (MSB) and all other bits set to 0.\nThe canonical format of an IPv4 prefix has all bits of\nthe IPv4 address set to zero that are not part of the\nIPv4 prefix.",
          "typeSchemaNode" : {
            "name" : "ipv4-prefix",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "STRING",
            "typeValidator" : [ {
              "type" : "LENGTH_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 9223372036854775807
              } ]
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))"
            } ]
          },
          "leafType" : "STRING"
        },
        "uri" : {
          "name" : "uri",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The uri type represents a Uniform Resource Identifier\n(URI) as defined by STD 66.\nObjects using the uri type MUST be in US-ASCII encoding,\nand MUST be normalized as described by RFC 3986 Sections\n6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\npercent-encoding is removed, and all case-insensitive\ncharacters are set to lowercase except for hexadecimal\ndigits, which are normalized to uppercase as described in\nSection 6.2.2.1.\nThe purpose of this normalization is to help provide\nunique URIs.  Note that this normalization is not\nsufficient to provide uniqueness.  Two URIs that are\ntextually distinct after this normalization may still be\nequivalent.\nObjects using the uri type may restrict the schemes that\nthey permit.  For example, 'data:' and 'urn:' schemes\nmight not be appropriate.\nA zero-length URI is not a valid URI.  This can be used to\nexpress 'URI absent' where required.\nIn the value set and its semantics, this type is equivalent\nto the Uri SMIv2 textual convention defined in RFC 5017.",
          "reference" : "RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\nRFC 3305: Report from the Joint W3C/IETF URI Planning Interest\nGroup: Uniform Resource Identifiers (URIs), URLs,\nand Uniform Resource Names (URNs): Clarifications\nand Recommendations\nRFC 5017: MIB Textual Conventions for Uniform Resource\nIdentifiers (URIs)",
          "typeSchemaNode" : {
            "name" : "uri",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "STRING"
          },
          "leafType" : "STRING"
        },
        "ipv6-flow-label" : {
          "name" : "ipv6-flow-label",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The flow-label type represents flow identifier or Flow Label\nin an IPv6 packet header that may be used to discriminate\ntraffic flows.\nIn the value set and its semantics, this type is equivalent\nto the IPv6FlowLabel textual convention of the SMIv2.",
          "reference" : "RFC 3595: Textual Conventions for IPv6 Flow Label\nRFC 2460: Internet Protocol, Version 6 (IPv6) Specification",
          "typeSchemaNode" : {
            "name" : "ipv6-flow-label",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "INTEGER",
            "typeValidator" : [ {
              "type" : "RANGE_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 1048575
              } ]
            } ]
          },
          "leafType" : "INTEGER"
        },
        "dscp" : {
          "name" : "dscp",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The dscp type represents a Differentiated Services Code-Point\nthat may be used for marking packets in a traffic stream.\nIn the value set and its semantics, this type is equivalent\nto the Dscp textual convention of the SMIv2.",
          "reference" : "RFC 3289: Management Information Base for the Differentiated\nServices Architecture\nRFC 2474: Definition of the Differentiated Services Field\n(DS Field) in the IPv4 and IPv6 Headers\nRFC 2780: IANA Allocation Guidelines For Values In\nthe Internet Protocol and Related Headers",
          "typeSchemaNode" : {
            "name" : "dscp",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "INTEGER",
            "typeValidator" : [ {
              "type" : "RANGE_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 63
              } ]
            } ]
          },
          "leafType" : "INTEGER"
        },
        "ipv6-address" : {
          "name" : "ipv6-address",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "The ipv6-address type represents an IPv6 address in full,\nmixed, shortened, and shortened-mixed notation.  The IPv6\naddress may include a zone index, separated by a % sign.\nThe zone index is used to disambiguate identical address\nvalues.  For link-local addresses, the zone index will\ntypically be the interface index number or the name of an\ninterface.  If the zone index is not present, the default\nzone of the device will be used.\nThe canonical format of IPv6 addresses uses the compressed\nformat described in RFC 4291, Section 2.2, item 2 with the\nfollowing additional rules: the :: substitution must be\napplied to the longest sequence of all-zero 16-bit chunks\nin an IPv6 address.  If there is a tie, the first sequence\nof all-zero 16-bit chunks is replaced by ::.  Single\nall-zero 16-bit chunks are not compressed.  The canonical\nformat uses lowercase characters and leading zeros are\nnot allowed.  The canonical format for the zone index is\nthe numerical format as described in RFC 4007, Section\n11.2.",
          "reference" : "RFC 4291: IP Version 6 Addressing Architecture\nRFC 4007: IPv6 Scoped Address Architecture\nRFC 5952: A Recommendation for IPv6 Address Text Representation",
          "typeSchemaNode" : {
            "name" : "ipv6-address",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "STRING",
            "typeValidator" : [ {
              "type" : "LENGTH_VALIDATOR",
              "ranges" : [ {
                "start" : 0,
                "end" : 9223372036854775807
              } ]
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?"
            }, {
              "type" : "PATTERN_VALIDATOR",
              "pattern" : "((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?"
            } ]
          },
          "leafType" : "STRING"
        },
        "ip-version" : {
          "name" : "ip-version",
          "module" : {
            "name" : "ietf-inet-types",
            "revision" : "2010-09-24"
          },
          "nodeType" : "LEAF",
          "description" : "This value represents the version of the IP protocol.\nIn the value set and its semantics, this type is equivalent\nto the InetVersion textual convention of the SMIv2.",
          "reference" : "RFC  791: Internet Protocol\nRFC 2460: Internet Protocol, Version 6 (IPv6) Specification\nRFC 4001: Textual Conventions for Internet Network Addresses",
          "typeSchemaNode" : {
            "name" : "ip-version",
            "module" : {
              "name" : "ietf-inet-types",
              "revision" : "2010-09-24"
            },
            "nodeType" : "TYPE",
            "leafType" : "ENUMERATION",
            "typeValidator" : [ {
              "type" : "ENUMERATION_VALIDATOR",
              "names" : {
                "ipv6" : 2,
                "ipv4" : 1,
                "unknown" : 0
              }
            } ]
          },
          "leafType" : "ENUMERATION"
        }
      },
      "id" : {
        "name" : "ietf-inet-types",
        "revision" : "2010-09-24"
      }
    },
    "IetfInetTypesTest" : {
      "prefix" : "mt",
      "id" : {
        "name" : "IetfInetTypesTest"
      }
    }
  },
  "schemaRoot" : {
    "nodeType" : "CONTAINER",
    "attributes" : {
      "Config" : "true"
    },
    "childNodes" : {
      "ietf-inet-types-test" : {
        "name" : "ietf-inet-types-test",
        "module" : {
          "name" : "IetfInetTypesTest"
        },
        "nodeType" : "CONTAINER",
        "childNodes" : {
          "address-version" : {
            "name" : "address-version",
            "module" : {
              "name" : "IetfInetTypesTest"
            },
            "nodeType" : "LEAF",
            "mandatory" : false,
            "typeSchemaNode" : {
              "name" : "ip-version",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "ENUMERATION",
              "typeValidator" : [ {
                "type" : "ENUMERATION_VALIDATOR",
                "names" : {
                  "ipv6" : 2,
                  "ipv4" : 1,
                  "unknown" : 0
                }
              } ]
            },
            "leafType" : "ENUMERATION"
          },
          "dscp" : {
            "name" : "dscp",
            "module" : {
              "name" : "IetfInetTypesTest"
            },
            "nodeType" : "LEAF",
            "mandatory" : false,
            "typeSchemaNode" : {
              "name" : "dscp",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "INTEGER",
              "typeValidator" : [ {
                "type" : "RANGE_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 63
                } ]
              } ]
            },
            "leafType" : "INTEGER"
          },
          "ip-address" : {
            "name" : "ip-address",
            "module" : {
              "name" : "IetfInetTypesTest"
            },
            "nodeType" : "LEAF",
            "mandatory" : false,
            "typeSchemaNode" : {
              "name" : "ipv6-flow-label",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "INTEGER",
              "typeValidator" : [ {
                "type" : "RANGE_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 1048575
                } ]
              } ]
            },
            "leafType" : "INTEGER"
          },
          "port-number" : {
            "name" : "port-number",
            "module" : {
              "name" : "IetfInetTypesTest"
            },
            "nodeType" : "LEAF",
            "mandatory" : false,
            "typeSchemaNode" : {
              "name" : "port-number",
              "module" : {
                "name" : "ietf-inet-types",
                "revision" : "2010-09-24"
              },
              "nodeType" : "TYPE",
              "leafType" : "INTEGER",
              "typeValidator" : [ {
                "type" : "RANGE_VALIDATOR",
                "ranges" : [ {
                  "start" : 0,
                  "end" : 65535
                } ]
              } ]
            },
            "leafType" : "INTEGER"
          }
        }
      }
    }
  }
}